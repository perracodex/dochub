# Copyright (c) 2024-Present Perracodex. Use of this source code is governed by an MIT license.

security {
	# Whether to enable the Basic and JWT Authentication.
	isEnabled: true
	isEnabled: ${?KDOC_SECURITY_ENABLED}

	# When true, it enables the 'HttpsRedirect' to redirect all HTTP requests to the HTTPS counterpart
	# before processing any call, and the 'HSTS' plugin to add the required HTTP Strict Transport Security
	# headers to all the requests.
	useSecureConnection: false
	useSecureConnection: ${?KDOC_SECURITY_SECURE_CONNECTIONS}

	rbac {
		# RBAC requires JWT to be enabled and a valid JWT token in the Authorization header.
		isEnabled: true
		isEnabled: ${?KDOC_SECURITY_RBAC_ENABLED}
	}

	basicAuth {
		providerName: "kdoc-basic-auth"
		providerName: ${?KDOC_SECURITY_BASIC_AUTH_PROVIDER_NAME}

		realm: "kdoc"
		realm: ${?KDOC_SECURITY_BASIC_AUTH_REALM}
	}

	jwtAuth {
		providerName: "kdoc-jwt-auth"
		providerName: ${?KDOC_SECURITY_JWT_AUTH_PROVIDER_NAME}

		tokenLifetimeSec: 3600 # 1 hour, (seconds).
		tokenLifetimeSec: ${?KDOC_SECURITY_JWT_AUTH_TOKEN_LIFETIME_SEC}

		audience: "kdoc"
		audience: ${?KDOC_SECURITY_JWT_AUTH_AUDIENCE}

		realm: "kdoc"
		realm: ${?KDOC_SECURITY_JWT_AUTH_REALM}

		issuer: "localhost"
		issuer: ${?KDOC_SECURITY_JWT_AUTH_ISSUER}

		secretKey: "9e6e26399b28fc5f5ad1e4431f8a387a60bf94b89716805a376319fcdca35ca8"
		secretKey: ${?KDOC_SECURITY_JWT_AUTH_SECRET_KEY}
	}


	# WARNING: The encryption settings below are critical for data privacy and integrity.
	# Changing any of these values post-encryption will result in the inability to decrypt previously encrypted data.
	# It is imperative to establish these values PRIOR to any data input and maintain them consistently to ensure data accessibility.
	# In the event of attribute compromise, you must decrypt all affected data using the former settings before re-encrypting with
	# updated values to prevent data loss. These settings must be handled with extreme caution and have restricted access.
	encryption {

		# Encryption settings for data at rest.
		# Ideal for scenarios where data is stored and its integrity must be maintained.
		# For example, when data is stored in a database or on disk.
		atRest {
			# Encryption Algorithm Configuration.
			# "AES_256_PBE_CBC" and "AES_256_PBE_GCM" are recommended for their balance of security and performance.
			# Choices: AES_256_PBE_CBC, AES_256_PBE_GCM, BLOW_FISH, TRIPLE_DES
			algorithm: "AES_256_PBE_CBC"
			algorithm: ${?KDOC_SECURITY_ENCRYPTION_ALGORITHM}

			# Salt for Encryption.
			# Utilized by "AES_256_PBE_CBC" and "AES_256_PBE_GCM" algorithms.
			# Essential for password-based encryption to thwart dictionary attacks.
			# Must be securely generated and unique per encryption operation for optimal security.
			salt: "5c0744940b5c369b"
			salt: ${?KDOC_SECURITY_ENCRYPTION_SALT}

			# Encryption Key.
			# The secret key for data encryption. For AES-256-based encryption, this should be 32 bytes (256 bits).
			# Ensure this key is strong and securely stored; exposure compromises all encrypted data.
			key: "db82fafdbfe33a8b2bff5297de6e3a5cc15d1309664543cd376839b4d3b6b62e"
			key: ${?KDOC_SECURITY_ENCRYPTION_KEY}

			# HMAC Signature for Data Integrity.
			# Used to verify the integrity and authenticity of the data. Compromise can lead to undetected tampering.
			# Should be unique and securely stored, similar to the encryption key.
			sign: "6da315f14158bb5b986ea816cb78a329a6d1e0f724e031ca497d6b269cd8e475"
			sign: ${?KDOC_SECURITY_ENCRYPTION_SIGN}
		}

		# Encryption settings for data in transit. Ideal for scenarios where data is actively being moved or accessed,
		# such as during data transfer or when encrypting dynamic content like URLs.
		# Having a separate encryption configuration allows for easier key rotation and re-encryption of data.
		atTransit {
			algorithm: "AES_256_PBE_CBC"
			algorithm: ${?KDOC_SECURITY_ENCRYPTION_ALGORITHM}

			salt: "5c0744940b5c369b"
			salt: ${?KDOC_SECURITY_ENCRYPTION_SALT}

			key: "db82fafdbfe33a8b2bff5297de6e3a5cc15d1309664543cd376839b4d3b6b62e"
			key: ${?KDOC_SECURITY_ENCRYPTION_KEY}

			sign: "6da315f14158bb5b986ea816cb78a329a6d1e0f724e031ca497d6b269cd8e475"
			sign: ${?KDOC_SECURITY_ENCRYPTION_SIGN}
		}

		atTransitExpiration: 3600 # 1 hour, (seconds).

		# HMAC (Hash-Based Message Authentication Code) is a type of cryptographic signature used for data integrity and authenticity.
		# It combines a secret key with the data message, passed through a cryptographic hash function, to ensure that the message
		# has not been altered in transit and is from a verified source. HMAC is crucial for secure data communications.
		hmac {
			# HMAC Algorithm Configuration.
			# Choices:
			# - HmacSHA256: Default, secure 256-bit hash.
			# - HmacSHA512: Enhanced security with a 512-bit hash.
			# - HmacSHA1: Less secure, not recommended for critical data.
			algorithm: "HmacSHA256"
			algorithm: ${?KDOC_SECURITY_HMAC_ALGORITHM}

			# HMAC Key.
			# This key authenticates message integrity and authenticity.
			# The key must be securely managed and stored, with a length matching or exceeding the hash output for optimal security.
			key: "db82fafdbfe33a8b2bff5297de6e3a5cc15d1309664543cd376839b4d3b6b62e"
			key: ${?KDOC_SECURITY_HMAC_KEY}
		}

	}

	# Constraints to be use for endpoints rate limiting.
	constraints {
		publicApi {
			# Maximum number of requests allowed for the Public API.
			# Default is 10_000 requests per second.
			limit: 10000
			limit: ${?KDOC_SECURITY_CONSTRAINTS_PUBLIC_API_LIMIT}
			refillMs: 1000 # 1 second.
			refillMs: ${?KDOC_SECURITY_CONSTRAINTS_PUBLIC_API_REFILL_MS}
		}

		privateApi {
			# Maximum number of requests allowed for the Private API.
			# Default is 10_000 requests per second.
			limit: 10000
			limit: ${?KDOC_SECURITY_CONSTRAINTS_PRIVATE_API_LIMIT}
			refillMs: 1000 # 1 second.
			refillMs: ${?KDOC_SECURITY_CONSTRAINTS_PRIVATE_API_REFILL_MS}
		}

		newToken {
			# Maximum number of requests allowed for a New Authentication Token generation.
			# Default is 1000 requests every 10 seconds.
			limit: 1000
			limit: ${?KDOC_SECURITY_CONSTRAINTS_NEW_TOKEN_LIMIT}
			refillMs: 10000 # 10 seconds.
			refillMs: ${?KDOC_SECURITY_CONSTRAINTS_NEW_TOKEN_REFILL_MS}
		}
	}
}
